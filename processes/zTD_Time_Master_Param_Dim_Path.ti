#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

vThisPro = 'zTD_Time_Master_Param_Dim_Path' ;

# Copyright Success Cubed Ltd 2008-2020

# GNU License

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

# ###############################################

# Purpose 

# This should be called from the zTD_Month_Dim_Gen spreadsheet
# once the required time dimension files have been generated
# There is an action button to run this on the sheet.

# This is the Master process that orchestrates everything necessary
# to setup and update a Time Dim, including all its Named Hierarchies
# and subsets, structure, aliases, and attributes

# It calls various sub-processes to achieve this.

# It is assumed that this process will be run 
# by a TM1 Adminsitrator.
# It is not intended for use by an end-user as
# a time dimension will typically be key to the 
# operation of a TM1 system.

# NON-STANDARD CUT DOWN ERROR HANDLING
# This process does not use the full set of zTD
# process initialisation and error handling routines

# ###############################################

# Session Variables

NumericSessionVariable('svError') ;

svError = 0 ;

# ###############################################

# Constants

gvInfoCube = 'zTD_Info' ; 

# ###############################################

# Validate Parameters

# #################################

vDimPrefix = pDimPrefix ;
vUnprefixedDim = pUnprefixedDim ;
vElemPrefix = pElemPrefix ;

IF( vUnprefixedDim  @= ''  ) ;
  vMsg = 'The Unprefixed Dim Name cannot be blank' ;
  svError = 1 ;
  ItemReject( vMsg ) ;
ENDIF ;

# #################################

vPath = pPath ;

IF( vPath @= '' ) ;
  svError = 1 ;
  vMsg = 'Path cannot be blank' ; 
  ItemReject( vMsg ) ;
ENDIF ;

# #################################

vDim = vDimPrefix | vUnprefixedDim ;

# #################################

vPro = 'zTD_Time_Setup_Dim_Param_DimPrefix_UnprefixedDim_ElemPrefix_Path' ;

vRet = ExecuteProcess( vPro ,
                                            'pDimPrefix' , vDimPrefix , 
                                            'pUnprefixedDim' , vUnprefixedDim , 
                                            'pElemPrefix' , vElemPrefix ,
                                            'pPath' , vPath  ) ;

IF( vRet <> ProcessExitNormal() ) ;
  svError = 1 ;
  vMsg = 'Error running process ' | vPro | 
                ' for Dim ' | vDim ;
                ' using CSV files in Path ' | vPath ;
  ItemReject( vMsg ) ;
ENDIF ;

# #################################

vPro = 'zTD_Time_Upd_Dim_and_Named_Hier_Structure_Param_Dim_Path' ;

vRet = ExecuteProcess( vPro ,
                                            'pDim' , vDim , 
                                            'pPath' , vPath  ) ;

IF( vRet <> ProcessExitNormal() ) ;
  svError = 1 ;
  vMsg = 'Error running process ' | vPro | 
                ' for Dim ' | vDim ;
                ' using CSV files in Path ' | vPath ;
  ItemReject( vMsg ) ;
ENDIF ;

# #################################

vPro = 'zTD_Time_Load_Alias_Param_Dim_Path' ; 

vRet = ExecuteProcess( vPro ,
                                            'pDim' , vDim , 
                                            'pPath' , vPath  ) ;

IF( vRet <> ProcessExitNormal() ) ;
  svError = 1 ;
  vMsg = 'Error running process ' | vPro | 
                ' for Dim ' | vDim ;
                ' using CSV files in Path ' | vPath ;
  ItemReject( vMsg ) ;
ENDIF ;

# #################################

vPro = 'zTD_Time_Load_Attr_Param_Dim_Path' ; 

vRet = ExecuteProcess( vPro ,
                                            'pDim' , vDim , 
                                            'pPath' , vPath  ) ;

IF( vRet <> ProcessExitNormal() ) ;
  svError = 1 ;
  vMsg = 'Error running process ' | vPro | 
                ' for Dim ' | vDim ;
                ' using CSV files in Path ' | vPath ;
  ItemReject( vMsg ) ;
ENDIF ;

# #################################

# All Aliases and Attributes will be in now
# Create a Default Subset on the }ElementAttributes dimension

vElemAttrDim = '}ElementAttributes_' | vDim ;

vSub = 'Default' ; 

IF( SubsetExists( vElemAttrDim, vSub ) = 0 ) ;
  SubsetCreate( vElemAttrDim , vSub ) ;
ENDIF ;

vMDX = '{ TM1SORT( { TM1SubsetAll( [' | vElemAttrDim | '] ) } , ASC ) }' ; 

HierarchySubsetMDXSet( vElemAttrDim , vElemAttrDim , vSub , vMDX ) ;

# #################################

# This part is only run if the system is using
# full zTD
# It updates all Subsets and Aliases
# to reflect the current period

IF( CubeExists( gvInfoCube ) = 1 & CubeExists( 'zTD_Info_Month_Fin' ) = 1 ) ;

  vPostMthDim = CellGetS( gvInfoCube , 'Any' , 'Posting Mth Dim' ) ; 
  vEffMthDim   = CellGetS( gvInfoCube , 'Any' , 'Effective Mth Dim' ) ; 

  IF( vDim @= vPostMthDim % vDim @= vEffMthDim ) ;

    vPro = 'zTD_Sub_Attr_Chg_Sub_Alias_After_Chg_Per_Param_Dim' ;

    vRet = ExecuteProcess( vPro ,
                                                'pDim' , vDim  ) ;

    IF( vRet <> ProcessExitNormal() ) ;
      svError = 1 ;
      vMsg = 'Error running process ' | vPro | 
                    ' for Dim ' | vDim ;
      ItemReject( vMsg ) ;
    ENDIF ;

  ENDIF ;

ENDIF ;

# ############################################

#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****


# NON-STANDARD CUT DOWN ERROR HANDLING

# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS

# EPILOG START  (after any CubeSetLogChanges)

# ##################################################

# Trap for rejects due to eg inability to convert a string to number 
# or some other such file formatting issue.

IF( GetProcessErrorFileName() @<> '' & svError <> 1 ) ;
  svError = 1 ;
  vMsg = 'One or more lines were rejected, ' | 
          'possibly due to formatting issues in the source data. ' | 
           'Please check error detail for more information. ' | 
            'If there is not a link for this on the screen use ' |
             'Application Folder \zTD_End User\300 Get Error Detail\' ;
  ItemReject( vMsg ) ;
ENDIF ;

IF( svError = 1 ) ;

  # Raise an error

  ProcessQuit ;

ENDIF ;

# ##################################################

# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS


#endregion